{
	"id": "1d404763e28c49da137247b1df78e746",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.30",
	"solcLongVersion": "0.8.30+commit.73712a01",
	"input": {
		"language": "Solidity",
		"sources": {
			"SimpleSwap.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ninterface IUniswapV2AMM {\n    /**    Agregar Liquidez (addLiquidity)\n\nDescripción: Función para que los usuarios agreguen liquidez a un par de tokens en un pool ERC-20.\nInterfaz: function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\nTareas:\nTransferir tokens del usuario al contrato.\nCalcular y asignar liquidez según reservas.\nEmitir tokens de liquidez al usuario.\nParámetros:\ntokenA, tokenB: Direcciones de los tokens.\namountADesired, amountBDesired: Cantidades deseadas de tokens.\namountAMin, amountBMin: Mínimos aceptables para evitar fallos.\nto: Dirección del destinatario.\ndeadline: Marca de tiempo para la transacción.\nRetornos:\namountA, amountB, liquidity: Cantidades efectivas y liquidez emitida.\n*/\n    function addLiquidity(address tokenA, address tokenB, uint amountA, uint amountB, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint effectiveAmountA, uint effectiveAmountB, uint liquidity);\n/**\nRemover Liquidez (removeLiquidity)\n\nDescripción: Función para que los usuarios retiren liquidez de un pool ERC-20.\nInterfaz: function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB);\nTareas:\nQuemar tokens de liquidez del usuario.\nCalcular y retornar tokens A y B.\nParámetros:\ntokenA, tokenB: Direcciones de los tokens.\nliquidity: Cantidad de tokens de liquidez a retirar.\namountAMin, amountBMin: Mínimos aceptables para evitar fallos.\nto: Dirección del destinatario.\ndeadline: Marca de tiempo para la transacción.\nRetornos:\namountA, amountB: Cantidades recibidas tras retirar liquidez.\n*/\n    function removeLiquidity(address tokenA, address tokenB, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB);\n/**\nIntercambiar Tokens (swapExactTokensForTokens)\n\nDescripción: Función para intercambiar un token por otro en cantidad exacta.\nInterfaz: function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\nTareas:\nTransferir token de entrada del usuario al contrato.\nCalcular intercambio según reservas.\nTransferir token de salida al usuario.\nParámetros:\namountIn: Cantidad de tokens de entrada.\namountOutMin: Mínimo aceptable de tokens de salida.\npath: Array de direcciones de tokens. (token entrada, token salida)\nto: Dirección del destinatario.\ndeadline: Marca de tiempo para la transacción.\nRetornos:\namounts: Array con cantidades de entrada y salida.\n*/\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\n/**\nObtener el Precio (getPrice)\n\nDescripción: Función para obtener el precio de un token en términos de otro.\nInterfaz: function getPrice(address tokenA, address tokenB) external view returns (uint price);\nTareas:\nObtener reservas de ambos tokens.\nCalcular y retornar el precio.\nParámetros:\ntokenA, tokenB: Direcciones de los tokens.\nRetorno:\nprice: Precio de tokenA en términos de tokenB.\n*/\n    function getPrice(address tokenA, address tokenB) external view returns (uint price);\n\n\n/**\nCalcular Cantidad a Recibir (getAmountOut)\n\nDescripción: Función para calcular cuántos tokens se recibirán al intercambiar.\nInterfaz: function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\nTareas:\nCalcular y retornar cantidad a recibir.\nParámetros:\namountIn: Cantidad de tokens de entrada.\nreserveIn, reserveOut: Reservas actuales en el contrato.\nRetorno:\namountOut: Cantidad de tokens a recibir.\n*/\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n}\nabstract contract SimpleSwap is IUniswapV2AMM {\n\n\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"SimpleSwap.sol": {
				"IUniswapV2AMM": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountA",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountB",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountAMin",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountBMin",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "addLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "effectiveAmountA",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "effectiveAmountB",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "liquidity",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "reserveIn",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "reserveOut",
									"type": "uint256"
								}
							],
							"name": "getAmountOut",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								}
							],
							"name": "getPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "price",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountAMin",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountBMin",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "removeLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountA",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountB",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountOutMin",
									"type": "uint256"
								},
								{
									"internalType": "address[]",
									"name": "path",
									"type": "address[]"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "swapExactTokensForTokens",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "amounts",
									"type": "uint256[]"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": "e8e33700",
							"getAmountOut(uint256,uint256,uint256)": "054d50d4",
							"getPrice(address,address)": "ac41865a",
							"removeLiquidity(address,address,uint256,uint256,address,uint256)": "700ee67f",
							"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": "38ed1739"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"effectiveAmountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"effectiveAmountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Agregar Liquidez (addLiquidity) Descripci\\u00f3n: Funci\\u00f3n para que los usuarios agreguen liquidez a un par de tokens en un pool ERC-20. Interfaz: function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity); Tareas: Transferir tokens del usuario al contrato. Calcular y asignar liquidez seg\\u00fan reservas. Emitir tokens de liquidez al usuario. Par\\u00e1metros: tokenA, tokenB: Direcciones de los tokens. amountADesired, amountBDesired: Cantidades deseadas de tokens. amountAMin, amountBMin: M\\u00ednimos aceptables para evitar fallos. to: Direcci\\u00f3n del destinatario. deadline: Marca de tiempo para la transacci\\u00f3n. Retornos: amountA, amountB, liquidity: Cantidades efectivas y liquidez emitida.\"},\"getAmountOut(uint256,uint256,uint256)\":{\"notice\":\"Calcular Cantidad a Recibir (getAmountOut) Descripci\\u00f3n: Funci\\u00f3n para calcular cu\\u00e1ntos tokens se recibir\\u00e1n al intercambiar. Interfaz: function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut); Tareas: Calcular y retornar cantidad a recibir. Par\\u00e1metros: amountIn: Cantidad de tokens de entrada. reserveIn, reserveOut: Reservas actuales en el contrato. Retorno: amountOut: Cantidad de tokens a recibir.\"},\"getPrice(address,address)\":{\"notice\":\"Obtener el Precio (getPrice) Descripci\\u00f3n: Funci\\u00f3n para obtener el precio de un token en t\\u00e9rminos de otro. Interfaz: function getPrice(address tokenA, address tokenB) external view returns (uint price); Tareas: Obtener reservas de ambos tokens. Calcular y retornar el precio. Par\\u00e1metros: tokenA, tokenB: Direcciones de los tokens. Retorno: price: Precio de tokenA en t\\u00e9rminos de tokenB.\"},\"removeLiquidity(address,address,uint256,uint256,address,uint256)\":{\"notice\":\"Remover Liquidez (removeLiquidity) Descripci\\u00f3n: Funci\\u00f3n para que los usuarios retiren liquidez de un pool ERC-20. Interfaz: function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB); Tareas: Quemar tokens de liquidez del usuario. Calcular y retornar tokens A y B. Par\\u00e1metros: tokenA, tokenB: Direcciones de los tokens. liquidity: Cantidad de tokens de liquidez a retirar. amountAMin, amountBMin: M\\u00ednimos aceptables para evitar fallos. to: Direcci\\u00f3n del destinatario. deadline: Marca de tiempo para la transacci\\u00f3n. Retornos: amountA, amountB: Cantidades recibidas tras retirar liquidez.\"},\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\":{\"notice\":\"Intercambiar Tokens (swapExactTokensForTokens) Descripci\\u00f3n: Funci\\u00f3n para intercambiar un token por otro en cantidad exacta. Interfaz: function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts); Tareas: Transferir token de entrada del usuario al contrato. Calcular intercambio seg\\u00fan reservas. Transferir token de salida al usuario. Par\\u00e1metros: amountIn: Cantidad de tokens de entrada. amountOutMin: M\\u00ednimo aceptable de tokens de salida. path: Array de direcciones de tokens. (token entrada, token salida) to: Direcci\\u00f3n del destinatario. deadline: Marca de tiempo para la transacci\\u00f3n. Retornos: amounts: Array con cantidades de entrada y salida.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"SimpleSwap.sol\":\"IUniswapV2AMM\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"SimpleSwap.sol\":{\"keccak256\":\"0x5f0f6e38f91934e0a60c3f4a3e26a15300b9e8affdbd46824405143e1be48c10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b73e58d8b6bbecdd3ad45f7f098b06ecd8d4d86530030b1e34dc8f4c5fc2176e\",\"dweb:/ipfs/QmfJ2Xc6NVPykWiziJuFEq3GgkSfVxqFqWvpGFoiBZqvac\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
								"notice": "Agregar Liquidez (addLiquidity) Descripción: Función para que los usuarios agreguen liquidez a un par de tokens en un pool ERC-20. Interfaz: function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity); Tareas: Transferir tokens del usuario al contrato. Calcular y asignar liquidez según reservas. Emitir tokens de liquidez al usuario. Parámetros: tokenA, tokenB: Direcciones de los tokens. amountADesired, amountBDesired: Cantidades deseadas de tokens. amountAMin, amountBMin: Mínimos aceptables para evitar fallos. to: Dirección del destinatario. deadline: Marca de tiempo para la transacción. Retornos: amountA, amountB, liquidity: Cantidades efectivas y liquidez emitida."
							},
							"getAmountOut(uint256,uint256,uint256)": {
								"notice": "Calcular Cantidad a Recibir (getAmountOut) Descripción: Función para calcular cuántos tokens se recibirán al intercambiar. Interfaz: function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut); Tareas: Calcular y retornar cantidad a recibir. Parámetros: amountIn: Cantidad de tokens de entrada. reserveIn, reserveOut: Reservas actuales en el contrato. Retorno: amountOut: Cantidad de tokens a recibir."
							},
							"getPrice(address,address)": {
								"notice": "Obtener el Precio (getPrice) Descripción: Función para obtener el precio de un token en términos de otro. Interfaz: function getPrice(address tokenA, address tokenB) external view returns (uint price); Tareas: Obtener reservas de ambos tokens. Calcular y retornar el precio. Parámetros: tokenA, tokenB: Direcciones de los tokens. Retorno: price: Precio de tokenA en términos de tokenB."
							},
							"removeLiquidity(address,address,uint256,uint256,address,uint256)": {
								"notice": "Remover Liquidez (removeLiquidity) Descripción: Función para que los usuarios retiren liquidez de un pool ERC-20. Interfaz: function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB); Tareas: Quemar tokens de liquidez del usuario. Calcular y retornar tokens A y B. Parámetros: tokenA, tokenB: Direcciones de los tokens. liquidity: Cantidad de tokens de liquidez a retirar. amountAMin, amountBMin: Mínimos aceptables para evitar fallos. to: Dirección del destinatario. deadline: Marca de tiempo para la transacción. Retornos: amountA, amountB: Cantidades recibidas tras retirar liquidez."
							},
							"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
								"notice": "Intercambiar Tokens (swapExactTokensForTokens) Descripción: Función para intercambiar un token por otro en cantidad exacta. Interfaz: function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts); Tareas: Transferir token de entrada del usuario al contrato. Calcular intercambio según reservas. Transferir token de salida al usuario. Parámetros: amountIn: Cantidad de tokens de entrada. amountOutMin: Mínimo aceptable de tokens de salida. path: Array de direcciones de tokens. (token entrada, token salida) to: Dirección del destinatario. deadline: Marca de tiempo para la transacción. Retornos: amounts: Array con cantidades de entrada y salida."
							}
						},
						"version": 1
					}
				},
				"SimpleSwap": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountA",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountB",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountAMin",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountBMin",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "addLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "effectiveAmountA",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "effectiveAmountB",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "liquidity",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "reserveIn",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "reserveOut",
									"type": "uint256"
								}
							],
							"name": "getAmountOut",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								}
							],
							"name": "getPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "price",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountAMin",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountBMin",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "removeLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountA",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountB",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountOutMin",
									"type": "uint256"
								},
								{
									"internalType": "address[]",
									"name": "path",
									"type": "address[]"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "swapExactTokensForTokens",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "amounts",
									"type": "uint256[]"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": "e8e33700",
							"getAmountOut(uint256,uint256,uint256)": "054d50d4",
							"getPrice(address,address)": "ac41865a",
							"removeLiquidity(address,address,uint256,uint256,address,uint256)": "700ee67f",
							"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": "38ed1739"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"effectiveAmountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"effectiveAmountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Agregar Liquidez (addLiquidity) Descripci\\u00f3n: Funci\\u00f3n para que los usuarios agreguen liquidez a un par de tokens en un pool ERC-20. Interfaz: function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity); Tareas: Transferir tokens del usuario al contrato. Calcular y asignar liquidez seg\\u00fan reservas. Emitir tokens de liquidez al usuario. Par\\u00e1metros: tokenA, tokenB: Direcciones de los tokens. amountADesired, amountBDesired: Cantidades deseadas de tokens. amountAMin, amountBMin: M\\u00ednimos aceptables para evitar fallos. to: Direcci\\u00f3n del destinatario. deadline: Marca de tiempo para la transacci\\u00f3n. Retornos: amountA, amountB, liquidity: Cantidades efectivas y liquidez emitida.\"},\"getAmountOut(uint256,uint256,uint256)\":{\"notice\":\"Calcular Cantidad a Recibir (getAmountOut) Descripci\\u00f3n: Funci\\u00f3n para calcular cu\\u00e1ntos tokens se recibir\\u00e1n al intercambiar. Interfaz: function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut); Tareas: Calcular y retornar cantidad a recibir. Par\\u00e1metros: amountIn: Cantidad de tokens de entrada. reserveIn, reserveOut: Reservas actuales en el contrato. Retorno: amountOut: Cantidad de tokens a recibir.\"},\"getPrice(address,address)\":{\"notice\":\"Obtener el Precio (getPrice) Descripci\\u00f3n: Funci\\u00f3n para obtener el precio de un token en t\\u00e9rminos de otro. Interfaz: function getPrice(address tokenA, address tokenB) external view returns (uint price); Tareas: Obtener reservas de ambos tokens. Calcular y retornar el precio. Par\\u00e1metros: tokenA, tokenB: Direcciones de los tokens. Retorno: price: Precio de tokenA en t\\u00e9rminos de tokenB.\"},\"removeLiquidity(address,address,uint256,uint256,address,uint256)\":{\"notice\":\"Remover Liquidez (removeLiquidity) Descripci\\u00f3n: Funci\\u00f3n para que los usuarios retiren liquidez de un pool ERC-20. Interfaz: function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB); Tareas: Quemar tokens de liquidez del usuario. Calcular y retornar tokens A y B. Par\\u00e1metros: tokenA, tokenB: Direcciones de los tokens. liquidity: Cantidad de tokens de liquidez a retirar. amountAMin, amountBMin: M\\u00ednimos aceptables para evitar fallos. to: Direcci\\u00f3n del destinatario. deadline: Marca de tiempo para la transacci\\u00f3n. Retornos: amountA, amountB: Cantidades recibidas tras retirar liquidez.\"},\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\":{\"notice\":\"Intercambiar Tokens (swapExactTokensForTokens) Descripci\\u00f3n: Funci\\u00f3n para intercambiar un token por otro en cantidad exacta. Interfaz: function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts); Tareas: Transferir token de entrada del usuario al contrato. Calcular intercambio seg\\u00fan reservas. Transferir token de salida al usuario. Par\\u00e1metros: amountIn: Cantidad de tokens de entrada. amountOutMin: M\\u00ednimo aceptable de tokens de salida. path: Array de direcciones de tokens. (token entrada, token salida) to: Direcci\\u00f3n del destinatario. deadline: Marca de tiempo para la transacci\\u00f3n. Retornos: amounts: Array con cantidades de entrada y salida.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"SimpleSwap.sol\":\"SimpleSwap\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"SimpleSwap.sol\":{\"keccak256\":\"0x5f0f6e38f91934e0a60c3f4a3e26a15300b9e8affdbd46824405143e1be48c10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b73e58d8b6bbecdd3ad45f7f098b06ecd8d4d86530030b1e34dc8f4c5fc2176e\",\"dweb:/ipfs/QmfJ2Xc6NVPykWiziJuFEq3GgkSfVxqFqWvpGFoiBZqvac\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
								"notice": "Agregar Liquidez (addLiquidity) Descripción: Función para que los usuarios agreguen liquidez a un par de tokens en un pool ERC-20. Interfaz: function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity); Tareas: Transferir tokens del usuario al contrato. Calcular y asignar liquidez según reservas. Emitir tokens de liquidez al usuario. Parámetros: tokenA, tokenB: Direcciones de los tokens. amountADesired, amountBDesired: Cantidades deseadas de tokens. amountAMin, amountBMin: Mínimos aceptables para evitar fallos. to: Dirección del destinatario. deadline: Marca de tiempo para la transacción. Retornos: amountA, amountB, liquidity: Cantidades efectivas y liquidez emitida."
							},
							"getAmountOut(uint256,uint256,uint256)": {
								"notice": "Calcular Cantidad a Recibir (getAmountOut) Descripción: Función para calcular cuántos tokens se recibirán al intercambiar. Interfaz: function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut); Tareas: Calcular y retornar cantidad a recibir. Parámetros: amountIn: Cantidad de tokens de entrada. reserveIn, reserveOut: Reservas actuales en el contrato. Retorno: amountOut: Cantidad de tokens a recibir."
							},
							"getPrice(address,address)": {
								"notice": "Obtener el Precio (getPrice) Descripción: Función para obtener el precio de un token en términos de otro. Interfaz: function getPrice(address tokenA, address tokenB) external view returns (uint price); Tareas: Obtener reservas de ambos tokens. Calcular y retornar el precio. Parámetros: tokenA, tokenB: Direcciones de los tokens. Retorno: price: Precio de tokenA en términos de tokenB."
							},
							"removeLiquidity(address,address,uint256,uint256,address,uint256)": {
								"notice": "Remover Liquidez (removeLiquidity) Descripción: Función para que los usuarios retiren liquidez de un pool ERC-20. Interfaz: function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB); Tareas: Quemar tokens de liquidez del usuario. Calcular y retornar tokens A y B. Parámetros: tokenA, tokenB: Direcciones de los tokens. liquidity: Cantidad de tokens de liquidez a retirar. amountAMin, amountBMin: Mínimos aceptables para evitar fallos. to: Dirección del destinatario. deadline: Marca de tiempo para la transacción. Retornos: amountA, amountB: Cantidades recibidas tras retirar liquidez."
							},
							"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
								"notice": "Intercambiar Tokens (swapExactTokensForTokens) Descripción: Función para intercambiar un token por otro en cantidad exacta. Interfaz: function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts); Tareas: Transferir token de entrada del usuario al contrato. Calcular intercambio según reservas. Transferir token de salida al usuario. Parámetros: amountIn: Cantidad de tokens de entrada. amountOutMin: Mínimo aceptable de tokens de salida. path: Array de direcciones de tokens. (token entrada, token salida) to: Dirección del destinatario. deadline: Marca de tiempo para la transacción. Retornos: amounts: Array con cantidades de entrada y salida."
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"SimpleSwap.sol": {
				"ast": {
					"absolutePath": "SimpleSwap.sol",
					"exportedSymbols": {
						"IUniswapV2AMM": [
							88
						],
						"SimpleSwap": [
							91
						]
					},
					"id": 92,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IUniswapV2AMM",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 88,
							"linearizedBaseContracts": [
								88
							],
							"name": "IUniswapV2AMM",
							"nameLocation": "68:13:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2,
										"nodeType": "StructuredDocumentation",
										"src": "88:851:0",
										"text": "Agregar Liquidez (addLiquidity)\nDescripción: Función para que los usuarios agreguen liquidez a un par de tokens en un pool ERC-20.\nInterfaz: function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\nTareas:\nTransferir tokens del usuario al contrato.\nCalcular y asignar liquidez según reservas.\nEmitir tokens de liquidez al usuario.\nParámetros:\ntokenA, tokenB: Direcciones de los tokens.\namountADesired, amountBDesired: Cantidades deseadas de tokens.\namountAMin, amountBMin: Mínimos aceptables para evitar fallos.\nto: Dirección del destinatario.\ndeadline: Marca de tiempo para la transacción.\nRetornos:\namountA, amountB, liquidity: Cantidades efectivas y liquidez emitida."
									},
									"functionSelector": "e8e33700",
									"id": 27,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addLiquidity",
									"nameLocation": "953:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "974:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 27,
												"src": "966:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "966:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 6,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "990:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 27,
												"src": "982:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 5,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "982:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 8,
												"mutability": "mutable",
												"name": "amountA",
												"nameLocation": "1003:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 27,
												"src": "998:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 7,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "998:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 10,
												"mutability": "mutable",
												"name": "amountB",
												"nameLocation": "1017:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 27,
												"src": "1012:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 9,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1012:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 12,
												"mutability": "mutable",
												"name": "amountAMin",
												"nameLocation": "1031:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 27,
												"src": "1026:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 11,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1026:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"mutability": "mutable",
												"name": "amountBMin",
												"nameLocation": "1048:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 27,
												"src": "1043:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 13,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1043:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1068:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 27,
												"src": "1060:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1060:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1077:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 27,
												"src": "1072:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 17,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1072:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "965:121:0"
									},
									"returnParameters": {
										"id": 26,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 21,
												"mutability": "mutable",
												"name": "effectiveAmountA",
												"nameLocation": "1110:16:0",
												"nodeType": "VariableDeclaration",
												"scope": 27,
												"src": "1105:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 20,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1105:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 23,
												"mutability": "mutable",
												"name": "effectiveAmountB",
												"nameLocation": "1133:16:0",
												"nodeType": "VariableDeclaration",
												"scope": 27,
												"src": "1128:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 22,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1128:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 25,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "1156:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 27,
												"src": "1151:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 24,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1151:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1104:62:0"
									},
									"scope": 88,
									"src": "944:223:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 28,
										"nodeType": "StructuredDocumentation",
										"src": "1168:721:0",
										"text": "Remover Liquidez (removeLiquidity)\nDescripción: Función para que los usuarios retiren liquidez de un pool ERC-20.\nInterfaz: function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB);\nTareas:\nQuemar tokens de liquidez del usuario.\nCalcular y retornar tokens A y B.\nParámetros:\ntokenA, tokenB: Direcciones de los tokens.\nliquidity: Cantidad de tokens de liquidez a retirar.\namountAMin, amountBMin: Mínimos aceptables para evitar fallos.\nto: Dirección del destinatario.\ndeadline: Marca de tiempo para la transacción.\nRetornos:\namountA, amountB: Cantidades recibidas tras retirar liquidez."
									},
									"functionSelector": "700ee67f",
									"id": 47,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeLiquidity",
									"nameLocation": "1903:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 41,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 30,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "1927:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 47,
												"src": "1919:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 29,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1919:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "1943:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 47,
												"src": "1935:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 31,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1935:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 34,
												"mutability": "mutable",
												"name": "amountAMin",
												"nameLocation": "1956:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 47,
												"src": "1951:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 33,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1951:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 36,
												"mutability": "mutable",
												"name": "amountBMin",
												"nameLocation": "1973:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 47,
												"src": "1968:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 35,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1968:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1993:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 47,
												"src": "1985:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 37,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1985:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 40,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "2002:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 47,
												"src": "1997:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 39,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1997:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1918:93:0"
									},
									"returnParameters": {
										"id": 46,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 43,
												"mutability": "mutable",
												"name": "amountA",
												"nameLocation": "2035:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 47,
												"src": "2030:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 42,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2030:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 45,
												"mutability": "mutable",
												"name": "amountB",
												"nameLocation": "2049:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 47,
												"src": "2044:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 44,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2044:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2029:28:0"
									},
									"scope": 88,
									"src": "1894:164:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 48,
										"nodeType": "StructuredDocumentation",
										"src": "2059:760:0",
										"text": "Intercambiar Tokens (swapExactTokensForTokens)\nDescripción: Función para intercambiar un token por otro en cantidad exacta.\nInterfaz: function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\nTareas:\nTransferir token de entrada del usuario al contrato.\nCalcular intercambio según reservas.\nTransferir token de salida al usuario.\nParámetros:\namountIn: Cantidad de tokens de entrada.\namountOutMin: Mínimo aceptable de tokens de salida.\npath: Array de direcciones de tokens. (token entrada, token salida)\nto: Dirección del destinatario.\ndeadline: Marca de tiempo para la transacción.\nRetornos:\namounts: Array con cantidades de entrada y salida."
									},
									"functionSelector": "38ed1739",
									"id": 65,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swapExactTokensForTokens",
									"nameLocation": "2833:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "2863:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 65,
												"src": "2858:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 49,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2858:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 52,
												"mutability": "mutable",
												"name": "amountOutMin",
												"nameLocation": "2878:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 65,
												"src": "2873:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 51,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2873:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "path",
												"nameLocation": "2911:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 65,
												"src": "2892:23:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 53,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "2892:7:0",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 54,
													"nodeType": "ArrayTypeName",
													"src": "2892:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2925:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 65,
												"src": "2917:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 56,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2917:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "2934:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 65,
												"src": "2929:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 58,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2929:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2857:86:0"
									},
									"returnParameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "amounts",
												"nameLocation": "2976:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 65,
												"src": "2962:21:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 61,
														"name": "uint",
														"nodeType": "ElementaryTypeName",
														"src": "2962:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 62,
													"nodeType": "ArrayTypeName",
													"src": "2962:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2961:23:0"
									},
									"scope": 88,
									"src": "2824:161:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 66,
										"nodeType": "StructuredDocumentation",
										"src": "2986:398:0",
										"text": "Obtener el Precio (getPrice)\nDescripción: Función para obtener el precio de un token en términos de otro.\nInterfaz: function getPrice(address tokenA, address tokenB) external view returns (uint price);\nTareas:\nObtener reservas de ambos tokens.\nCalcular y retornar el precio.\nParámetros:\ntokenA, tokenB: Direcciones de los tokens.\nRetorno:\nprice: Precio de tokenA en términos de tokenB."
									},
									"functionSelector": "ac41865a",
									"id": 75,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPrice",
									"nameLocation": "3398:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 71,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 68,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "3415:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 75,
												"src": "3407:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 67,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3407:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 70,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "3431:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 75,
												"src": "3423:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 69,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3423:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3406:32:0"
									},
									"returnParameters": {
										"id": 74,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 73,
												"mutability": "mutable",
												"name": "price",
												"nameLocation": "3467:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 75,
												"src": "3462:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 72,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "3462:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3461:12:0"
									},
									"scope": 88,
									"src": "3389:85:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 76,
										"nodeType": "StructuredDocumentation",
										"src": "3477:463:0",
										"text": "Calcular Cantidad a Recibir (getAmountOut)\nDescripción: Función para calcular cuántos tokens se recibirán al intercambiar.\nInterfaz: function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\nTareas:\nCalcular y retornar cantidad a recibir.\nParámetros:\namountIn: Cantidad de tokens de entrada.\nreserveIn, reserveOut: Reservas actuales en el contrato.\nRetorno:\namountOut: Cantidad de tokens a recibir."
									},
									"functionSelector": "054d50d4",
									"id": 87,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAmountOut",
									"nameLocation": "3954:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 78,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "3972:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 87,
												"src": "3967:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 77,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "3967:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 80,
												"mutability": "mutable",
												"name": "reserveIn",
												"nameLocation": "3987:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 87,
												"src": "3982:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 79,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "3982:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 82,
												"mutability": "mutable",
												"name": "reserveOut",
												"nameLocation": "4003:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 87,
												"src": "3998:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 81,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "3998:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3966:48:0"
									},
									"returnParameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "4043:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 87,
												"src": "4038:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 84,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "4038:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4037:16:0"
									},
									"scope": 88,
									"src": "3945:109:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 92,
							"src": "58:3998:0",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 89,
										"name": "IUniswapV2AMM",
										"nameLocations": [
											"4089:13:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 88,
										"src": "4089:13:0"
									},
									"id": 90,
									"nodeType": "InheritanceSpecifier",
									"src": "4089:13:0"
								}
							],
							"canonicalName": "SimpleSwap",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": false,
							"id": 91,
							"linearizedBaseContracts": [
								91,
								88
							],
							"name": "SimpleSwap",
							"nameLocation": "4075:10:0",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 92,
							"src": "4057:51:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "32:4077:0"
				},
				"id": 0
			}
		}
	}
}