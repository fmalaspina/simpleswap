{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenA",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenB",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amountA",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountB",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountAMin",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountBMin",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "addLiquidity",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "effectiveAmountA",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "effectiveAmountB",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "liquidity",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "reserveIn",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "reserveOut",
						"type": "uint256"
					}
				],
				"name": "getAmountOut",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenA",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenB",
						"type": "address"
					}
				],
				"name": "getPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenA",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenB",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amountAMin",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountBMin",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "removeLiquidity",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountA",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountB",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountOutMin",
						"type": "uint256"
					},
					{
						"internalType": "address[]",
						"name": "path",
						"type": "address[]"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "swapExactTokensForTokens",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "amounts",
						"type": "uint256[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
					"notice": "Agregar Liquidez (addLiquidity) Descripción: Función para que los usuarios agreguen liquidez a un par de tokens en un pool ERC-20. Interfaz: function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity); Tareas: Transferir tokens del usuario al contrato. Calcular y asignar liquidez según reservas. Emitir tokens de liquidez al usuario. Parámetros: tokenA, tokenB: Direcciones de los tokens. amountADesired, amountBDesired: Cantidades deseadas de tokens. amountAMin, amountBMin: Mínimos aceptables para evitar fallos. to: Dirección del destinatario. deadline: Marca de tiempo para la transacción. Retornos: amountA, amountB, liquidity: Cantidades efectivas y liquidez emitida."
				},
				"getAmountOut(uint256,uint256,uint256)": {
					"notice": "Calcular Cantidad a Recibir (getAmountOut) Descripción: Función para calcular cuántos tokens se recibirán al intercambiar. Interfaz: function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut); Tareas: Calcular y retornar cantidad a recibir. Parámetros: amountIn: Cantidad de tokens de entrada. reserveIn, reserveOut: Reservas actuales en el contrato. Retorno: amountOut: Cantidad de tokens a recibir."
				},
				"getPrice(address,address)": {
					"notice": "Obtener el Precio (getPrice) Descripción: Función para obtener el precio de un token en términos de otro. Interfaz: function getPrice(address tokenA, address tokenB) external view returns (uint price); Tareas: Obtener reservas de ambos tokens. Calcular y retornar el precio. Parámetros: tokenA, tokenB: Direcciones de los tokens. Retorno: price: Precio de tokenA en términos de tokenB."
				},
				"removeLiquidity(address,address,uint256,uint256,address,uint256)": {
					"notice": "Remover Liquidez (removeLiquidity) Descripción: Función para que los usuarios retiren liquidez de un pool ERC-20. Interfaz: function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB); Tareas: Quemar tokens de liquidez del usuario. Calcular y retornar tokens A y B. Parámetros: tokenA, tokenB: Direcciones de los tokens. liquidity: Cantidad de tokens de liquidez a retirar. amountAMin, amountBMin: Mínimos aceptables para evitar fallos. to: Dirección del destinatario. deadline: Marca de tiempo para la transacción. Retornos: amountA, amountB: Cantidades recibidas tras retirar liquidez."
				},
				"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
					"notice": "Intercambiar Tokens (swapExactTokensForTokens) Descripción: Función para intercambiar un token por otro en cantidad exacta. Interfaz: function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts); Tareas: Transferir token de entrada del usuario al contrato. Calcular intercambio según reservas. Transferir token de salida al usuario. Parámetros: amountIn: Cantidad de tokens de entrada. amountOutMin: Mínimo aceptable de tokens de salida. path: Array de direcciones de tokens. (token entrada, token salida) to: Dirección del destinatario. deadline: Marca de tiempo para la transacción. Retornos: amounts: Array con cantidades de entrada y salida."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"SimpleSwap.sol": "IUniswapV2AMM"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"SimpleSwap.sol": {
			"keccak256": "0x5f0f6e38f91934e0a60c3f4a3e26a15300b9e8affdbd46824405143e1be48c10",
			"license": "MIT",
			"urls": [
				"bzz-raw://b73e58d8b6bbecdd3ad45f7f098b06ecd8d4d86530030b1e34dc8f4c5fc2176e",
				"dweb:/ipfs/QmfJ2Xc6NVPykWiziJuFEq3GgkSfVxqFqWvpGFoiBZqvac"
			]
		}
	},
	"version": 1
}